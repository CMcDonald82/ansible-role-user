---

- name: Sudo Group | Ensure sudo group is present
  group:
    name: sudo
    state: present

- name: Sudo Group | Ensure sudo group has sudo privileges
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: "^%sudo"
    line: "{{ (enable_passwordless_sudo) | ternary('%sudo ALL=(ALL) NOPASSWD:ALL', '%sudo ALL=(ALL:ALL) ALL') }}" #"%sudo ALL=(ALL) NOPASSWD:ALL" 
    validate: "visudo -cf %s" 

- name: Users | Create deploy users
  user:
    name: "{{ item.username }}"
    password: "{{ item.password }}"
    groups: "{{ item.groups | d(omit) }}" # - sudo
    append: "{{ item.append | d(omit) }}" # yes
    shell: "{{ item.shell | d(users_default_shell) }}" # /bin/bash
    update_password: "{{ item.update_password | d(omit) }}" # always
    createhome: "{{ item.create_home_dir | d(omit) }}" # yes
    home: "{{ item.home | d(omit) }}" #"{{ item.home | d('/home/' + item.username) }}"
    # generate_ssh_key: "{{ (item.ssh_keys) | ternary(omit, yes) }}"
    # ssh_key_file: .ssh/id_rsa
    # maybe have default path to ssh_keys here
    state: present
  with_items: "{{ system_users }}"
  when: item.ssh_keys is defined
  # register: rootkeys
  # no_log: true

# - debug: var=rootkeys

- name: SSH Keys | Add authorized ssh key (public key) for deploy user
  authorized_key:
    user: "{{ item.0.username }}"
    key: "{{ lookup('file', item.1) }}" #"{{ item.1 }}" 
  with_subelements:
    - "{{ system_users }}"
    - ssh_keys | d([])
    - skip_missing: yes
  # no_log: true

- name: Users | Remove users
  user:
    name: "{{ item.username }}"
    state: absent
    remove: "{{ item.remove | d(omit) }}"
    force: "{{ item.force | d(omit) }}"
  with_items: "{{ users_removed }}"
